// VERSION 1.3
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
<#
{
    // LOGIC

    string ttPath = this.Host.ResolvePath(ttFileName);

    string historyFile = ttPath.Replace(ttFileName, "FileHistory.txt");
    bool historyFileExist = File.Exists(historyFile);
    string historyVersion;
    if (historyFileExist)
    {
        historyVersion = File.ReadAllText(historyFile);

    }
    else
    {
        historyVersion = "0.0.0.0";
    }

    int historyRevision = -1;
    MatchCollection historyMatches;
    Regex historyPattern = new Regex("(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<revision>\\d+)\\.(?<build>\\d+)");
    historyMatches = historyPattern.Matches(historyVersion);
    if (historyMatches.Count == 1)
    {
        historyRevision = Convert.ToInt32(historyMatches[0].Groups["revision"].Value);
    }

    string path = ttPath.Replace(".tt", ".cs");
    bool assemblyInfoExists = File.Exists(path);

    if (assemblyInfoExists)
    {
        string output = File.ReadAllText(path);
        Regex pattern = new Regex("AssemblyVersion\\(\"(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<revision>\\d+)\\.(?<build>\\d+)\"\\)");
        MatchCollection matches = pattern.Matches(output);
        if (matches.Count == 1)
        {
            major = Convert.ToInt32(matches[0].Groups["major"].Value);
            minor = Convert.ToInt32(matches[0].Groups["minor"].Value);

            if (autoRevisionUpdateDaily)
            {
                revision = (int)(DateTime.UtcNow - projectStartDate).TotalDays;            
                if (historyRevision != revision)
                {
                    build = 0;
                }
            }
            else
            {
                revision = Convert.ToInt32(matches[0].Groups["revision"].Value);
            }
            build = Convert.ToInt32(matches[0].Groups["build"].Value) + 1;

        }
    }

    Console.WriteLine($"[{assemblyTitle}] v{historyVersion} => v{major}.{minor}.{revision}.{build}");

    File.WriteAllText(historyFile, $"{major}.{minor}.{revision}.{build}");
}
#>
using System.Reflection;
using System.Resources;

// General Information
[assembly: AssemblyTitle("<#= this.assemblyTitle #>")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("<#= this.assemblyAuthor #>")]
[assembly: AssemblyProduct("<#= this.assemblyTitle #>")]
[assembly: AssemblyCopyright("<#= this.assemblyAuthor #> Copyright © <#= DateTime.Now.ToString("yyyy") #>")]
[assembly: NeutralResourcesLanguage("en-AU")]

// Version information
[assembly: AssemblyVersion("<#= this.major #>.<#= this.minor #>.<#= this.revision #>.<#= this.build #>")]
[assembly: AssemblyFileVersion("<#= this.major #>.<#= this.minor #>.<#= this.revision #>.<#= this.build #>")]

namespace <#= this.namespaceName #>.<#= this.assemblyTitle.Replace(" ", "") #>
{
    
    /// <summary>
    /// Represents the version info for <#= this.assemblyTitle #>
    /// </summary>
    public class VersionInfo
    {
        /// <summary>
        /// Represents latest release version date. Format: dd:MM:yyyy hh:mm tt
        /// </summary>
	    public const string lastestRelease = "<#= DateTime.Now.ToString("dd.MM.yyyy hh:mm tt") #>";
        /// <summary>
        /// Represents current version.
        /// </summary>
	    public const string version = "<#= $"{major}.{minor}.{revision}.{build}" #>";

        /// <summary>
        /// Represents if the mod has been complied for x64
        /// </summary>
        #if x64
            internal const bool IS_64_BIT = true;
        #else
            internal const bool IS_64_BIT = false;
        #endif
        /// <summary>
        /// Represents if the mod has been complied in Debug mode
        /// </summary>
        #if DEBUG
            internal const bool IS_DEBUG_CONFIG = true;
        #else
            internal const bool IS_DEBUG_CONFIG = false;
        #endif
    }
}
<#+
    int major = 1;
    int minor = 0;
    int revision = 0;
    int build = 0;
    string assemblyTitle = "TurboMod";
    string assemblyAuthor = "Tommo J. Productions";
    string namespaceName = "TommoJProductions";
    string ttFileName = "AssemblyInfo.tt";
    bool autoRevisionUpdateDaily = false;
    DateTime projectStartDate = new DateTime(2022, 1, 1);
#>